<?xml version="1.0" encoding="UTF-8"?>
<!--
$LastChangedDate: 2011-12-06$.
$LastChangedBy: martindholmes$
$LastChangedRevision: 8769 $
-->

<?xml-model href="https://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="https://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_all.rng" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  >
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>How to edit the TEI Guidelines</title>
        <author>Lou Burnard</author>
      </titleStmt>
      <publicationStmt>
        <publisher>Text Encoding Initiative</publisher>
        <date>2011</date>
      </publicationStmt>
      <sourceDesc>
        <p>All my own work</p>
      </sourceDesc>
    </fileDesc>
    <revisionDesc>
      <change when="2018-09-16" who="MDH">Linked to schema that actually exists, and tweaked to handle the fallout.</change>
      <change when="2018-09-16" who="MDH">Adding documentation on how to create or edit an Appendix to the Guidelines.</change>
      <change when="2016-07-08" who="MDH">Adding more documentation to clarify where some processing instructions in the Guidelines are actually processed.</change>
      <change when="2015-12-14" who="MDH">Updates to account for new Jenkins server subdomains.</change>
      <change when="2015-11-10" who="MDH">Updates to account for the change from master to dev branch on GitHub.</change>
      <change when="2015-10-03" who="MDH">Updates to account for the shift from SF SVN to GitHub.</change>
      <change when="2015-04-06" who="MDH">Added exhortation to include sufficient linebreaks in examples,
        to avoid distorted page rendering in the Guidelines HTML output.</change>
      <change when="2015-02-11" who="MDH">Added clarification about how to XInclude a new spec file.</change>
      <change when="2013-12-22" who="KSH">Some clarifications, including not to use valDesc.</change>
      <change when="2013-11-17" who="KSH">Made more explicit that you have to update @versionDate when editing the content of an element that it's located on.</change>
      <change when="2013-06-24" who="KSH">When closing a ticket, add the URL of the revision number. Also replaced all "SVN" with "Subversion" when referring to the software.</change>
      <change when="2013-06-20" who="KSH">Copyediting and clarified how to do citations per https://sourceforge.net/p/tei/bugs/527/ .</change>
      <change when="2013-04-08" who="KSH">Full path to schema for validation</change>
      <change when="2013-02-01" who="KSH">We should use egXML@source instead of egXML@corresp per Sebastian.</change>
      <change when="2012-12-30" who="KSH">Clarified svn commit instructions.</change>
      <change when="2012-12-28" who="KSH">Clarified what to include in a specList. Removed info that duplicates tcw24. Some light copyediting.</change>
      <change when="2012-12-17" who="MDH">Revised instructions for creating a new element to take account of the switch to XInclude from entities.</change>
      <change when="2012-09-13" who="MDH">Revised Schematron section based on feedback from KH.</change>
      <change when="2012-09-06" who="MDH">Added a section on adding Schematron constraints.</change>
      <change when="2012-08-09" who="DRS">Removed sections redundant with new TCW24 and redirected a link there.</change>
      <change when="2012-05-15" who="KSH">Added instructions on when you can edit translations of specs.</change>
      <change when="2012-05-14" who="KSH">Removed mention of P5/Source/Guidelines/en/style-guide.txt since this has been removed from SourceForge.  Corrected @target to local copy of this document.</change>
      <change when="2012-02-18" who="KSH">Created new section on good encoding practice, which includes info on @xml:id and @target and new note about using ptr instead of ref.</change>
      <change when="2012-02-13" who="MDH">Removed "building a release" section and replaced with link to tcw22.</change>
      <change when="2011-12-16" who="KSH">updated publicationStmt; added steps on updating latest download and creating news item in SourceForge</change>
      <change when="2011-12-16">correction by <name>David Sewell</name> per SR request</change>
      <change when="2011-02-19">started first draft</change>
    </revisionDesc>
  </teiHeader>
  <text>
    <body>
      <p>This document is intended to set out the way things are
      currently managed  in the
        editing of the TEI Guidelines. General notes on the rationale
	for this state -- <emph>why</emph> it is the way it is -- may be added here
        later. The intention is to provide information for Council
      members wishing to contribute actively to the continued
      development and maintenance of the text of the Guidelines. </p>
      <div>
        <head>Organization of the Guidelines chapters</head>
        <p>It cannot have escaped your notice that each chapter (almost) of the Guidelines defines a
          distinct module. In theory at least, each chapter is organised in more or less the same
          way: <list>
            <item>it begins with a paragraph explaining what the module is for, and containing a lot
              of links to the individual subsections it contains; </item>
            <item>each subsection introduces a (small) group of elements, usually beginning with a
              <gi>specList</gi>, which will typically list all the elements discussed within a 
              given section, listed in whatever order makes sense for the context, but not necessary
              all possible child elements for a given element; </item>
            <item>each element is then introduced in turn, usually including an appropriate usage
              example (on examples, see further <ptr target="#examples"/>); </item>
            <item>a <gi>specGrp</gi> for each group of elements defined may be given at the end of
              each section; </item>
            <item>a <gi>specGrp</gi> for the whole module is given at the end of the chapter: it
              includes the other specifications either directly (by means XIncludes) or
              indirectly (by means of a <gi>specGrpRef</gi> pointing to a preceding
              <gi>specGrp</gi>).</item>
          </list></p>
<p>The only chapters not organised in this way are those which do not
introduce or define particular modules.  </p>
      </div>
      <div>
        <head>Organization of the specifications</head>
        <p>Each element, class, and macro defined in the Guidelines is
	declared within its own XML file,
          containing an <gi>elementSpec</gi>, <gi>classSpec</gi>, or <gi>macroSpec</gi> as
          appropriate. These files are in the directory
	  <ident>Source/Specs</ident>. For example, the file
            <ident>Source/Specs/abbr.xml</ident> contains the element spec for the <gi>abbr</gi> element.
            Note that the elements for the major components of the spec each have a <att>versionDate</att>.
            <emph rend="bold">If editing the content of the element, you must remember to update the value of this 
            attribute</emph> in order to allow for detection of translations (stored in the same file) that need 
            updating. As a general rule, don't update a translation for any language of which you are not 
            a native speaker. If you feel confident enough to adjust the translation, leave the 
            <att>versionDate</att> attribute unchanged on the translation in order to ensure the translation 
            will be reviewed eventually.</p>
        <p>Each chapter of the Guidelines is stored in a file called
            <ident>Source/Guidelines/xx/YY-name.xml</ident> where xx is the language (currently only en or
          fr), YY is the two letter identifier for each chapter (see <ptr target="#chaptercodes"/>)
          and name is the name of the module being defined by that chapter. </p>
        <p>The file <ident>Source/guidelines-xx.xml</ident> (where xx is either en or fr) is the
            <soCalled>driver file</soCalled> for the whole shebang. It contains XInclude elements 
            for each of the chapters making up the Guidelines. </p>
        <p>Hence, to add a new element (say <gi>saintName</gi>) you
	might proceed as follows: <list type="ordered">
            <item>Write a new file <ident>saintName.xml</ident> containing an <gi>elementSpec</gi>
              for your new element and add it to the <ident>Specs</ident> folder. Look at other specifications
              to see which <ref target="http://www.tei-c.org/release/doc/tei-p5-doc/en/html/TD.html#TDcrystals">ODD elements</ref>
              to use. Note that we do not use <gi>valDesc</gi> at this time, instead using only a <gi>datatype</gi>.</item>
            <item>Edit the source of the relevant chapter (presumably
                <ident>ND-namesdates.xml</ident> in this example) to include a documentation of the element. Use a
                <gi>specList</gi> to reference the description from your new spec within the body of
              the text, like this:
<egXML xmlns="http://www.tei-c.org/ns/Examples"> 
  <p>This module also defines the following canonical element: <specList>
    <specDesc key="saintName"/>
  </specList></p>
</egXML> 

and follow up with some discussion of usage.
</item>
<!--	   This item added by MDH 2015-02-11. -->
	  <item>Also in the relevant chapter, make sure you include an XInclude instruction to bring the specification 
	  file for your element into the Guidelines source. Normally you would add it to an existing <gi>specGrp</gi>
	  element somewhere in the chapter source which already contains similar links:
<eg>
  &lt;specGrp xml:id="DNDPER" n="Personal and organizational names"&gt;
  &lt;include xmlns="http://www.w3.org/2001/XInclude" href="../../Specs/orgName.xml"/&gt;
  &lt;include xmlns="http://www.w3.org/2001/XInclude" href="../../Specs/saintName.xml"/&gt;
  [...]
  &lt;/specGrp&gt;
</eg>
	  
	  </item>
          </list>
        </p>
      </div>
      
      <!-- This section added by MDH 2013-04-26 as part of work on https://sourceforge.net/p/tei/bugs/512/. 
          Extra clarification added by MDH 2016-07-08.   -->
      <div>
<head>Processing Instructions</head>
 <p>In some places in the Guidelines source code, you will notice processing instructions which look like this:
 
        <egXML xmlns="http://www.tei-c.org/ns/Examples">
          &lt;?insert totalElements?&gt;
        </egXML>
        
These processing instructions are replaced during the Guidelines build process by generated content. (That processing
takes place in the XSL module P5/Utilities/expand.xsl.) In the 
case of the example above, the total number of elements defined in the current version of the Guidelines is
calculated and inserted. This is a list of the processing instructions currently in use, and what they are replaced 
by:

<list type="gloss">
  <label>&lt;?insert tab-content-models?&gt;</label>
  <item>Inserts a generated table of content models into the ST chapter (not likely to be used elsewhere)</item>
  <label>&lt;?insert totalElements?&gt;</label>
  <item>Inserts a count of the total number of elements defined in the current version</item>
  <label>&lt;?insert version?&gt;</label>
  <item>Inserts the current version number of the TEI release</item>
</list>

If you are writing a Guidelines section that can use one of these variables, feel free to insert the appropriate 
processing instruction. If you think of other content that could be generated in this way, raise an issue on GitHub so that it can be implemented.
 </p>
     </div>

      <div>
        <head>Style Notes</head>
        <div>
          <head>General</head>
          <p>See the <ref target="http://www.tei-c.org/Activities/Council/Working/tcw24.xml">Style 
            Guide for Editing the TEI Guidelines</ref>, 
            which attempts to state preferred practice on vexed issues
            issues about spelling, punctuation, etc. The goal of these rules is to avoid
            inconsistency, and also (wherever possible) to avoid producing text which is markedly
            either British or American English. </p>
          <p></p>
        </div>
        <div xml:id="examples">
          <head>Examples</head>
          <p>The purpose of an example is to illustrate a specific element or feature. Do not
            include irrelevant encoding which does not contribute to this primary goal. If such
            encoding is unavoidable (eg to make your example valid), then it must be explained in
            the supporting text.</p>
          <p>Wherever possible, choose your examples from real documents and provide bibliographic
            citations for them, either:
            <list>
              <item>in a <gi>note</gi> element, with a <att>place</att> whose value is <val>bottom</val> or 
                <val>foot</val>, following the <gi>egXML</gi> (if the citation is only a URL in a 
                <gi>ptr</gi>)</item>
              <item>in a full bibliographic citation (with or without a URL in <gi>ptr</gi>) in 
                the file <ident>BIB-Bibliography.xml</ident></item>
            </list> 
            Use the <att>source</att> attribute on the <gi>egXML</gi> element to link an example to its source. Note
            that the <att>xml:lang</att> attribute is mandatory on <gi>exemplum</gi>: this is to
            ensure that the ODD processor knows which examples to choose in a given context.</p>
          <p>All examples should be valid against a modified TEI schema in which any element can act
            as a root element; this validity is checked during the build process. </p>
          <p>When you have added or edited examples, always check in the following Jenkins build 
          that they are displaying correctly. In particular, note that if your examples include 
          long lines without linebreaks, the result can be a horizontally-scrolling page and a 
          broken table layout in the reference page. If you see this in the output, you can fix it 
          by adding hard-coded linebreaks at suitable points in the example code.</p>
        </div>
        <div xml:id="encoding">
          <head>Good encoding practice</head>
          <p>Good encoding practice will ensure not only valid but 
            also highly functional Guidelines.</p>
          <p>When referencing figures and to other sections of the 
            Guidelines, use <gi>ptr</gi>, not <gi>ref</gi>, to ensure 
            that the title and number of the referenced item is 
            automatically inserted when the Guidelines are compiled.</p>
          <p>The build process validates cross-references. 
          Since the Guidelines is compiled into a single XML document 
          at build time, IDs must be unique across the text and the
          examples.  Consequently, any <att>xml:id</att> attribute
          values appearing in your examples must be unique within the
          text of the whole of the Guidelines. Furthermore, any
          <att>target</att> (etc.) values which do not point to
          anything in the source will be flagged with a warning during
	  the build process. </p>
        </div>
      </div>
      <div>
        <head>Making a change to the Guidelines</head>
<!--    Substantially edited by MDH 2015-10-03 for shift to GitHub.   -->
        <p>Most changes to the Guidelines are the result of a bug or feature request 
        ticket on GitHub. Once a ticket is assigned to you, and you're sure there
        is agreement to proceed with the change, follow the steps below.</p>
        
        <list>
          <item>If you don't have a local clone of the git repo, go to the <ref target="https://github.com/TEIC/TEI">GitHub site</ref> and clone the repository following the instructions there. It's usually something like <code>git clone https://github.com/TEIC/TEI.git TEI</code> </item>
          <item>If you have already checked out a copy, make sure to update it (<code>git pull</code>) <emph>before</emph>
            you make any changes in it.</item>
          <item>Make sure you are on the <code>dev</code> branch (we do not make direct changes to the master branch): <code>git checkout dev</code></item>
          <item>Edit the appropriate file(s) to make your changes, or if the change requires it, create a new file. Make sure your source is still valid. The TEI source files should all 
          contain xml-model processing instructions linking them to the latest version 
          of the NVDL file used for validation of the P5 source.</item>
          <item>If you have a locally installed P5 build environment, make sure you can still build,
            and that the examples are still valid. You can set up a Docker-based build environment
            by following the instructions in <ptr
              target="http://teic.github.io/TCW/testing_and_building.html"/>. If you have a build
            environment nor the means to set one up, just use git to push your updated version to
            GitHub and wait for our two <ident>Jenkins</ident> Continuous Integration servers (<ptr target="http://jenkins.tei-c.org/"/> and <ptr target="http://jenkins2.tei-c.org/"/>) to assess your work.</item>
          <item>Check in your changes:
            <list>
              <item>If the file is new, add it to the git repository: <code>git add filename.xml</code></item>
                </list>
              </item>
              <item>Commit your changes: <code>git commit -m "Your commit message" filename.xml</code> <emph>Be sure to add a detailed commit message which includes a link to the git issue ticket which prompted the change</emph>.</item>
          <item>Push the change to the git repository: <code>git push origin dev</code></item>
          <item>Make a note of the revision hash when git receives your change.</item>
          <item>Assuming the change was successful (see below), add a comment to the GitHub issue ticket which includes the hash of the revision. You may also close the ticket if it is complete.</item>
        </list>
        <p>Error messages may appear at any stage. Please do not leave the source in an invalid
          state (it makes life unnecessarily difficult for others). If you cannot immediately fix a
          validity error, revert your change while you think about it. If you are working on a particularly complex change involving multiple files, it may be better to create a branch in which to work on your changes, and then to merge the branch when you are confident that the work is successfully completed. See any guide to git for instructions on how to approach that. Bear in mind that our Jenkins servers only build the dev branch, so you cannot depend on them to test-build your working branch.</p>
        
        <p>The Jenkins servers monitor the Git repository, and when they detect a change, they check it out and commence building several targets, just as you would build them on your local machine. There are a couple of advantages to letting the Jenkins servers check your build for you:</p>
        
        <list>
          <item>You don't have to have all the various packages and other software required for a build installed on your system. This means you can make a quick fix to the Guidelines on any computer you happen to be using, without installing a lot of extra software.</item>
          <item>The required packages on the Jenkins servers tend to be updated regularly, and we're watching them to make sure they work properly.</item>
          <item>Jenkins attempts to let you know by email if there's a problem, and provides useful debugging tools.</item>
        </list>
        
        <p>If you submit a change, and later get an email from one of the Jenkins servers telling you that the build failed, it will provide a link to the build information on the server. Here's what to do:</p>
        
        <list>
          <item>First, check that the build is broken on both Jenkins servers. If it's only broken on one of them, it may have been caused by a lag in updates to packages on that server. </item>
          <item>If both servers have completed a build since your commit, and both are showing an error, then you need to check where the error is occurring. On the page for that build on the Jenkins server site, click on <q>Parsed Console Output</q> on the left menu. You'll see links to <q>Errors</q> and <q>Warnings</q>; these will show you the exact point in the build script where the errors or warnings occurred. This may give you a useful clue to the cause of the failure.</item>
          <item>If you still can't figure out the problem, email the Council list with a link to the build information, and someone will be able to help.</item>
          <item>Once you know what the problem is, fix it by editing the source again and committing the change to the git repository. Jenkins will then do its stuff, and you'll know whether your fix worked as expected.</item>
        </list>
        
        <p>Error messages appearing during the <ident>make test</ident> phase (the <q>TEIP5-Test</q> job on Jenkins) usually indicate that
          your changes are in conflict with the Birnbaum Doctrine, which decrees that changes in the
          Guideline schemas should not invalidate existing documents. You may wish to discuss the
          specific issue with other Council members.</p>

	
<!-- The following div added by MDH 2013-11-10 per https://sourceforge.net/p/tei/bugs/612/. -->
        <div>
            <head>Images</head>
            
            <p>If you use an image in your  Guidelines change, you will need to add it to the git repository
                    in the <ident>P5/Images</ident> directory. If you have asked for and received permission 
                    from a rights-holder to use the image, include all of the relevant correspondence in a zip 
                    file named the same as the image file (so for an image <ident>fred.png</ident>, include
                    permission documents in a file called <ident>fred.zip</ident>).</p>
        </div>
        
<!--      This div added by MDH 2018-09-16 following work
          on ticket #1657. 
        -->
        <div xml:id="appendices">
          <head>Adding or Editing an Appendix</head>
          
          <p>The Appendices to the <title level="m">TEI Guidelines</title> mostly constitute lists of features (elements, attributes, classes etc.) which have been automatically harvested from the Guidelines compiled source (<ident>p5.xml</ident> or <ident>p5subset.xml</ident>) during the build process. When adding a new appendix of this type, you need to:
          
          <list rend="numbered">
          <item>Create a new <ident>APPENDIXTHING.xml</ident> file in the <ident>TEI/P5/Source/Guidelines/en/</ident> folder. Model this on the already-existing files for other appendices. The basic pattern is to provide a very short introduction to the list you're creating (see below). The convention is to name this file with an all-caps name followed by lower-case <ident>.xml</ident>.</item>
          
          <item>Add a line to <ident>TEI/P5/Source/guidelines-en.xml</ident> (right near the end of the file) to XInclude your file in the <title level="m">Guidelines</title>. Again, follow the examples already there. Put your new appendix in the sequence in a location that makes sense in relation to the other appendices.</item>
          
          <item>If your appendix listing is to be created automatically, edit the appropriate file in the Stylesheets repository (most likely <ident>Stylesheets/common/common_tagdocs.xsl</ident>) to enable it to generate the list or table (see below).</item>
          
          <item>If your auto-generated appendix content uses headings that should be translated for other language versions of the Guidelines, add the appropriate language entries to <ident>Stylesheets/i18n.xml</ident> (if they're not already there).</item>
          </list>
          </p>
          
          <p>Auto-generated appendix listings will require two things: a TEI <gi>divGen</gi> element which acts as a trigger to cause the list to be generated, and a Stylesheets template which processes the <gi>divGen</gi> to create the output. For example, the list of deprecations consists of this <ident>DEPRECATIONS.xml</ident> file:
            
            
    <egXML xmlns="http://www.tei-c.org/ns/Examples">
    <div type="div1" xml:id="DEPRECATIONS">
      <head>Deprecations</head>
      <div>
        <head>About the Deprecation Appendix</head>
        <p>This appendix gives you a list of all items (elements,
          attributes, attribute values, datatypes etc.) which are deprecated
          in this revision of the TEI Guidelines (revision &lt;?insert
revision?&gt; of TEI P5 &lt;?insert version?&gt;).</p>
      </div>
      <divGen type="deprecationcat"/>
    </div>
    </egXML>
            
            Note that there are two kinds of auto-generated content here: first, the two processing instructions 
            <code>&lt;?insert revision?&gt;</code> and 
            <code>&lt;?insert version?&gt;</code>, which are self-explanatory and can simply be used, and 
            <code>&lt;divGen type="deprecationcat"/&gt;</code>, which was created specifically for this appendix file, and for which processing had to be explicitly written.
            
            If you now look at <ident>Stylesheets/common/common_tagdocs.xsl</ident>, you'll find this template:
            
            
<eg>
  &lt;xsl:template match="tei:divGen[@type = 'deprecationcat']"&gt;
    &lt;xsl:element namespace="{$outputNS}" name="{$tableName}"&gt;
      &lt;xsl:attribute name="{$rendName}"&gt;
        &lt;xsl:text&gt;deprecationcat&lt;/xsl:text&gt;
      &lt;/xsl:attribute&gt;
      &lt;!-- .. --&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:template&gt;
</eg>
            
            This template creates a table in whatever the target output format is, listing the deprecations. Note that the table headings are created like this:
            
            
<eg>
  &lt;xsl:element namespace="{$outputNS}" name="{$cellName}"&gt;
    &lt;xsl:element namespace="{$outputNS}" name="{$hiName}"&gt;
      &lt;xsl:attribute name="{$rendName}"&gt;
        &lt;xsl:text&gt;label&lt;/xsl:text&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:attribute name="{$langAttributeName}"&gt;
        &lt;xsl:value-of select="$documentationLanguage"/&gt;
      &lt;/xsl:attribute&gt;
      &lt;xsl:sequence select="tei:i18n('Identifier')"/&gt;
    &lt;/xsl:element&gt;
  &lt;/xsl:element&gt;
</eg>
            
            
            where the keyword <val>Identifier</val> is used to look up the appropriate language translation in the <ident>Stylesheets/i18n.xml</ident> file. If those items already exist in the file, you can simply use them, but if you are creating headings which do not yet have entries, you will need to add them to <ident>Stylesheets/i18n.xml</ident> like this:
            
            
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
  <entry>
    <key>Identifier</key>
    <text xml:lang="en" lang3="eng">Identifier</text>
  </entry>
  </egXML>
            
            and if you are competent to add the equivalent translations in any of the <title level="m">Guidelines</title> languages, you can add them alongside the English version:
            
  <egXML xmlns="http://www.tei-c.org/ns/Examples">
  <entry>
    <key>Description</key>
    <text xml:lang="en" lang3="eng">Description</text>
    <text xml:lang="de" lang3="deu">Beschreibung</text>
    <text xml:lang="fr" lang3="fra">Description</text>
    <text xml:lang="it" lang3="ita">Descrizione</text>
  </entry>
  </egXML>
            Only when all these pieces are in place can the new appendix function correctly. It would normally be appropriate to do work on this scale in a branch of the repo, but this is a little complicated by the fact that you need to edit two repositories separately. It is fine to make the changes in the TEI repository first, resulting in an appendix page that simply lacks its listing, then do the Stylesheets changes to make the listing.</p>
            
            <p>Of course, a simple <soCalled>manual</soCalled> appendix consisting of some explanatory prose can be created simply by adding the <ident>APPENDIXTHING.xml</ident> file and XIncluding it in <ident>guidelines-en.xml</ident>, with no Stylesheets changes required.</p>
            
        </div>

      </div>
      

      <div xml:id="schematron">
        
        <head>Adding Schematron constraints to specifications</head>
        
        <p>The TEI ODD system is primarily concerned with generating schemas in the form of RelaxNG or XML Schema.
        However, there are often circumstances in which you want to apply constraints to elements and attributes which cannot easily be captured by
        normal XML schemas. For instance, you might want to apply a co-occurrence constraint on some attributes. The <att>targetLang</att> attribute
        is a good example. <att>targetLang</att> is an optional attribute which “specifies the language of the content to be found
        at the destination referenced by <att>target</att>, using a <soCalled>language tag</soCalled> generated according to
       <ref target="http://www.rfc-editor.org/rfc/bcp/bcp47.txt">BCP 47</ref>.” Obviously, there is no point in using <att>targetLang</att>
       if you're not also using <att>target</att>. However, many such co-occurrence constraints are difficult to express
        in RelaxNG schemas, and may not survive conversion to other schema formats such as XML Schema or DTD.</p>
        
        <p>For this reason, we often use ISO Schematron to express constraints like this. If you look in att.pointing.xml, where the <att>targetLang</att> 
attribute is defined, you'll find this constraint, inside the <gi>attDef</gi> for <att>targetLang</att>:</p>
        
          <egXML xmlns="http://www.tei-c.org/ns/Examples">
            <constraintSpec ident="targetLang" scheme="isoschematron">
              <constraint>
                <sch:rule context="tei:*[not(self::tei:schemaSpec)][@targetLang]">
                  <sch:assert test="count(@target)">@targetLang can only be used if 
                    @target is specified.</sch:assert>
                </sch:rule>
              </constraint>
            </constraintSpec>
          </egXML>
        
        
        <p>This Schematron rule is an assertion that if <att>targetLang</att> is used, <att>target</att> should also be present. <gi>constraintSpec</gi> 
has an attribute <att>scheme</att> (normally set to <val>isoschematron</val>). Inside <gi>constraintSpec</gi>, <gi>constraints</gi>s have <gi>assert</gi> elements, 
which have <att>test</att> attributes. The <att>test</att> attribute value is always an XPath expression; if the XPath tests false, the assertion will be triggered, and its 
contents will appear on the console when you build or validate. There is also a <gi>report</gi> element which is similar, but which triggers when true rather than when false,
so you can check both positive and negative conditions. In Roma, you can also generate a Schematron schema which you can also use to test your document against. 
This document is essentially a compilation in Schematron of all the TEI constraints. The operation of checking a document with Schematron is independent of any other validation 
processes that take place using other schemas. For a full introduction to Schematron, see the <ref target="http://www.schematron.com">Schematron website</ref>.</p>
        
        <p><gi>constraintSpec</gi> can appear as a child of <gi>attDef</gi>, <gi>classSpec</gi>, <gi>elementSpec</gi>, <gi>macroSpec</gi>, and <gi>schemaSpec</gi>. 
We'll go through the process of adding a constraint like the one above. The constraint we're going to add relates to dating elements (<gi>date</gi>, <gi>birth</gi> etc.) and 
the <att>calendar</att> attribute. <att>calendar</att> <q>indicates the system or calendar to which the date represented by the content of this element belongs.</q> In other 
words, <att>calendar</att> should only be used if the dating element has textual content. This makes sense (assuming that <att>calendar</att> points at a valid <gi>calendar</gi> element):
        
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="true">
              <date calendar="#julian">January, 1622</date>
            </egXML>
          
        
   whereas this is not:
        
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="false">
              <date when="1622" calendar="#julian"/>
            </egXML>
          
        
        because the <gi>date</gi> element has no textual content to which the <att>calendar</att> attribute could apply. We're going to express this in the form of a Schematron 
constraint, along the lines of the one we've examined above. First, we open the att.datable.xml file, and find the <gi>attDef</gi> element which defines <att>calendar</att>. 
We can add the <gi>constraintSpec</gi> element immediately after the <gi>datatype</gi> element, like this:
        
        
  <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="true">
    <constraintSpec ident="calendar" scheme="isoschematron">
      <constraint>
        <sch:rule context="tei:*[@calendar]">
          <sch:assert test="string-length(.) gt 0">
            @calendar indicates the system or calendar 
            to which the date represented by the content 
            of this element belongs, but this element 
            has no textual content.
          </sch:assert>
        </sch:rule>
      </constraint>
    </constraintSpec>
  </egXML>
        
        (Obviously, by the time you're reading this, the <gi>constraintSpec</gi> is already in the TEI source, so you'll see it there.) If the Schematron namespace is not 
already defined somewhere in the file, we'll also have to make sure we add it; in this case, I defined the prefix in the <gi>classSpec</gi> root element: 
<code>xmlns:sch="http://purl.oclc.org/dsdl/schematron"</code>. Then we commit our changes, and let the TEI build process build all the products, and make sure that 
we didn't get anything wrong.</p>
          
          <p>When writing Schematron constraints for the Guidelines, bear these points in mind:
          <list>
              <item>Ensure that the context item for the rule is an element, not an attribute, as in the example above. For technical reasons, the Schematron processing in the build process will generate error messages if the context item is an attribute.</item>
              <item>Break up the message up into fairly short lines, so that it's easy to read when it appears in the build log.</item>
              <item>Use the <gi>name</gi> element in place of the name of the context element. This will be helpful for future processing needs. </item>
              <item>Refer to attributes using the "@" prefix, rather than quotation marks or plain names (as above).</item>
          </list>
          
          </p>
        
        <p>The Schematron constraint above should cover what we're trying to accomplish. However, it's quite difficult for us to test whether it is in fact doing exactly what it should be, unless we build a new copy of Roma 
and use it to generate a Schematron schema, then validate a test document against it. This is probably not practical for most of us. Fortunately, the TEI build system provides a 
way for us to do this; in fact, we can put in place a couple of tests that will always be run whenever P5 is built, checking that our Schematron constraint is intact and functioning 
as we expect. </p>
        
        <p>The first thing we're going to do is add a couple of tests that should pass. We'll add a dating element which has both <att>calendar</att> and some textual content, as well as an 
empty dating element with no textual content. If these tests pass, then we know that our constraint is not doing anything wrong. (We don't yet know whether it's doing anything at 
all, of course; that comes later.) </p>
        
        <p>If you look at <ident>trunk/P5/Test</ident>, you'll see there is a whole folder full of files whose purpose is to test various aspects of the TEI build process and products. We want to add 
our tests to one of these files. The question is which one? We'll add it to the basic test file, which is <ident>testbasic.xml</ident>; this is tested against schemas generated from <ident>testbasic.odd</ident>, 
which should contain all the dating features we're interested in testing. If we look at that file, we find there are already several date elements in there, so we can try adding our 
<att>calendar</att> attribute to one of those. Let's choose the date of 1685 on a dictionary entry sense:
        
        
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="true">
              <sense>
                <date calendar="http://en.wikipedia.org/wiki/Julian_calendar">1685</date>
                <form>
                  <orth>pamplemousse </orth>
                </form>
              </sense>
            </egXML>
        
        We could go to the trouble of adding <gi>calendarDesc</gi> and <gi>calendar</gi> to the header of the file so we can point to a calendar element in the same document, 
but since <att>calendar</att> is a <ident>data.pointer</ident>, we can point to an external source of calendar information.</p>
        
        <p>We also want to add, somewhere, a date element which has no textual content and no <att>calendar</att> attribute. We might as well do this in the header, 
by adding a simple <gi>revisionDesc</gi> element, which gives us the added bonus of being able to describe our change:
        
            <egXML xmlns="http://www.tei-c.org/ns/Examples" valid="true">
              <revisionDesc>
                <change>&lt;date when="2012-09-06"/>MDH: Added @calendar to one date, and the date 
                  element in here, for testing a new Schematron constraint.</change>
              </revisionDesc>
            </egXML>
          
        
        Now we can commit our change, and see if the build of TEIP5-Test completes successfully on our Jenkins servers.</p>
        
        <p>If that build successfully completes, we haven't broken anything. But we still don't know whether our constraint will actually fire when something is wrong. 
In order to do that, we have to use the "detest" system. In <ident>trunk/P5/Test</ident>, you'll find the following files:
        
        <list>
          <item><ident>expected-results/detest.log</ident></item>
          <item><ident>detest.odd</ident></item>
          <item><ident>detest.xml</ident></item>
        </list>
        
        detest.odd and detest.xml are test files like the ones we've seen above, but the purpose of the <soCalled>detest</soCalled> files is to introduce deliberate errors and make sure that the testing process throws up the expected error results. What happens is basically this:
        
        <list>
          <item>Schemas are built from detest.odd (including a Schematron schema).</item>
          <item>The file <ident>detest.xml</ident> is validated against those schemas.</item>
          <item>Resulting error messages are collected in a file called <ident>detest.log</ident> (in the Test directory).</item>
          <item>That file is compared with the <ident>detest.log</ident> file in the <ident>expected-results</ident> subdirectory.</item>
          <item>If they are not identical, the test build fails.</item>
        </list>
        
        So what we need to do is to add some new markup to <ident>detest.xml</ident> which is designed to fail our Schematron test. The problem is that we cannot reliably predict how it will fail—in other words, we can't know in advance what the resulting <ident>detest.log</ident> file should look like, because we can't know in what order the tests will run, and what the precise error messages might be. We could find this out if we had a working local build environment of our own, but it's far simpler to let Jenkins do the job for us. So this is what we'll do:
        
        <list>
          <item>Add our new test to <ident>detest.xml</ident>.</item>
          <item>Commit the change to the git repository.</item>
          <item>Let Jenkins run the build (which should fail).</item>
          <item>Examine the resulting <ident>detest.log</ident> on Jenkins, and copy it to our local <ident>expected-results/detest.log</ident>.</item>
          <item>Commit that change to the repository.</item>
          <item>Let Jenkins build again, and make sure that the build completes successfully.</item>
        </list>
        
        We'll add this div to the <ident>detest.xml</ident> file:
        
        
<egXML xmlns="http://www.tei-c.org/ns/Examples" valid="false">
  <div>
    <p>Added by MDH. This tests the Schematron constraint that any element with 
          @calendar must have some textual content.</p>
    <p><date when="2012-09-06" calendar="http://en.wikipedia.org/wiki/Gregorian_calendar"/></p>
  </div>
</egXML>
        
        Now we commit the change to git, and Jenkins will start building. The build should fail, and it does. If we now go to the Jenkins workspace on one of our two build servers:
        
        <list>
          <item><ref target="https://jenkins.tei-c.org/job/TEIP5-Test-dev/ws/P5/Test/">https://jenkins.tei-c.org/job/TEIP5-Test-dev/ws/P5/Test/</ref></item>
          <item><ref target="https://jenkins2.tei-c.org/job/TEIP5-Test-dev/ws/P5/Test/">https://jenkins2.tei-c.org/job/TEIP5-Test-dev/ws/P5/Test/</ref></item>
        </list>

        we'll see a file called <ident>detest.log</ident>, and if we look inside it, we'll find this bit, generated by our constraint:
        
        <q>@calendar indicates the system or calendar to which the date represented by the content of this element belongs, but this element has no textual content. (string-length(.) gt 0)</q>
        
        This line is obviously missing from <ident>expected-results/detest.log</ident>, so the build failed when the two files were compared. We can fix that very simply:
        
        <list>
          <item>Download the <ident>detest.log</ident> file from the TEIP5-Test workspace on the Jenkins server (<ident>job/TEIP5-Test/ws/Test/</ident>).</item>
          <item>Copy its contents into our local file <ident>expected-results/detest.log</ident>.</item>
          <item>Commit this change to git (git commit followed by git push).</item>
          <item>Watch Jenkins build P5-Test again, and make sure it completes successfully.</item>
        </list>
        </p>
          
    
        
      </div>

<div xml:id="release">
<head>Building the release</head>

<p>Note: the original content of this section has been removed, because a longer document dedicated to 
   documenting the release process has been created. Please refer to <ref target="http://www.tei-c.org/Activities/Council/Working/tcw22.xml">TCW22: Building a TEI Release</ref>.</p>

<!-- Content deleted by mholmes 2012-02-13. -->
</div>


      <div>
        <head>Reference section</head>
        <div  xml:id="chaptercodes">
          <head>Chapter codes</head>
<p>Following a lengthy debate in the Council as to whether the
two-character codes originally used to identify individual chapters 
should be dropped in favour of longer more human-readable names, a
compromise solution was reached in which the two character codes were
retained as prefixes to longer human-readable names. The same
two-character codes are also used to identify the HTML and PDF files
generated during the release process.</p>
<p>The following
table shows the correspondence between the printed organization of the
Guidelines and the corresponding filenames. The order is determined by the
driver file <ident>Source/guidelines-xx.xml</ident>, from which the
table is derived.
<table>
<row role="label"><cell>Section</cell><cell>Title</cell><cell>filename</cell></row>
<row>
<cell>[i]</cell><cell>Releases of the TEI Guidelines</cell>
<cell>TitlePageVerso.xml</cell></row>
<row>
<cell>[ii]</cell><cell>Dedication</cell>
<cell>Dedication.xml</cell></row>
<row>
<cell>[iii]</cell><cell>Preface and Acknowledgments</cell>
<cell>FM1-IntroductoryNote.xml</cell></row>
<row>
<cell>[iv]</cell><cell>About These Guidelines</cell>
<cell>AB-About.xml</cell></row>
<row>
<cell>[v]</cell><cell>A Gentle Introduction to XML</cell>
<cell>SG-GentleIntroduction.xml</cell></row>
<row>
<cell>[vi]</cell><cell>Languages and Character Sets</cell>
<cell>CH-LanguagesCharacterSets.xml</cell></row>
<row>
<cell>[1]</cell><cell>The TEI Infrastructure</cell>
<cell>ST-Infrastructure.xml</cell></row>
<row>
<cell>[2]</cell><cell>The TEI Header</cell>
<cell>HD-Header.xml</cell></row>
<row>
<cell>[3]</cell><cell>Elements Available in All TEI Documents</cell>
<cell>CO-CoreElements.xml</cell></row>
<row>
<cell>[4]</cell><cell>Default Text Structure</cell>
<cell>DS-DefaultTextStructure.xml</cell></row>
<row>
<cell>[5]</cell><cell>Representation of Non-standard Characters and
Glyphs</cell><cell>WD-NonStandardCharacters.xml</cell>
</row>
<row>
<cell>[6]</cell><cell>Verse</cell><cell>VE-Verse.xml</cell>
</row>
<row>
<cell>[7]</cell><cell>Performance Texts</cell>
<cell>DR-PerformanceTexts.xml</cell></row>
<row>
<cell>[8]</cell><cell>Transcriptions of Speech</cell>
<cell>TS-TranscriptionsofSpeech.xml</cell></row>
<row>
<cell>[9]</cell><cell>Dictionaries</cell>
<cell>DI-PrintDictionaries.xml</cell></row>
<row>
<cell>[10]</cell><cell>Manuscript Description</cell>
<cell>MS-ManuscriptDescription.xml</cell></row>
<row>
<cell>[11]</cell><cell>Representation of Primary Sources</cell>
<cell>PH-PrimarySources.xml</cell></row>
<row>
<cell>[12]</cell><cell>Critical Apparatus</cell>
<cell>TC-CriticalApparatus.xml</cell></row>
<row>
<cell>[13]</cell><cell>Names, Dates, People, and Places</cell>
<cell>ND-NamesDates.xml</cell></row>
<row>
<cell>[14]</cell><cell>Tables, Formulæ, and Graphics</cell>
<cell>FT-TablesFormulaeGraphics.xml</cell></row>
<row>
<cell>[15]</cell><cell>Language Corpora</cell>
<cell>CC-LanguageCorpora.xml</cell></row>
<row>
<cell>[16]</cell><cell>Linking, Segmentation, and Alignment</cell>
<cell>SA-LinkingSegmentationAlignment.xml</cell></row>
<row>
<cell>[17]</cell><cell>Simple Analytic Mechanisms</cell>
<cell>AI-AnalyticMechanisms.xml</cell></row>
<row>
<cell>[18]</cell><cell>Feature Structures</cell>
<cell>FS-FeatureStructures.xml</cell></row>
<row>
<cell>[19]</cell><cell>Graphs, Networks, and Trees</cell>
<cell>GD-GraphsNetworksTrees.xml</cell></row>
<row>
<cell>[20]</cell><cell>Non-hierarchical Structures</cell>
<cell>NH-Non-hierarchical.xml</cell></row>
<row>
<cell>[21]</cell><cell>Certainty, Precision, and Responsibility</cell>
<cell>CE-CertaintyResponsibility.xml</cell></row>
<row>
<cell>[22]</cell><cell>Documentation Elements</cell>
<cell>TD-DocumentationElements.xml</cell></row>
<row>
<cell>[23]</cell><cell>Using the TEI</cell>
<cell>USE.xml</cell></row>
<row>
<cell>[A1]</cell><cell>Model Classes</cell>
<cell>REF-CLASSES-MODEL.xml</cell></row>
<row>
<cell>[A2]</cell><cell>Attribute Classes</cell>
<cell>REF-CLASSES-ATTS.xml</cell></row>
<row>
<cell>[A3]</cell><cell>Elements</cell>
<cell>REF-ELEMENTS.xml</cell></row>
<row>
<cell>[A4]</cell><cell>Attributes</cell>
<cell>REF-ATTRIBUTES.xml</cell></row>
<row>
<cell>[A5]</cell><cell>Datatypes and Other Macros</cell>
<cell>REF-MACROS.xml</cell></row>
<row>
<cell>[A6]</cell><cell>Bibliography</cell>
<cell>BIB-Bibliography.xml</cell></row>
<row>
<cell>[A7]</cell><cell>Prefatory Notes</cell>
<cell>PrefatoryNote.xml</cell></row>
<row>
<cell>[A8]</cell><cell>Colophon</cell>
<cell>COL-Colophon.xml</cell></row></table>
</p>
<p>In most chapters, the two character code is also used as a prefix
for the <att>xml:id</att> values given to each <gi>div</gi>
element. Note that every <gi>div</gi> element carries an
<att>xml:id</att> value, whether or not it is actually referenced
explicitly elewhere in the Guidelines.
</p>
<p>Note that files with names beginning <code>REF</code> contain
only <gi>divGen</gi> elements: their content, which provides the
reference documentation (sections A1 to A5 inclusive), is
automatically generated during the build process.</p>
  </div>
        <div>
          <head>Naming conventions</head>
          <p>TEI naming conventions have evolved over time, but remain fairly consistent. </p>
          <list type="gloss">
            <label>generic identifiers</label>
            <item>An element and attribute identifiers should be a single natural language word in
              lowercase if possible. If more than one word is conjoined to form a name, then the
              first letter of the second and any subsequent word should be uppercased. Hyphens,
              underscores, dots etc are not used within element or attribute names. </item>
            <label>class names</label>
            <item>Class names are made up three parts: a name, constructed like an element name,
              with a prefix and optionally a suffix. The prefix is one of <code>model.</code> or
                <code>att.</code> and indicates whether this is a model or an attribute class. The
              suffix, if present, is used to indicate subclassing: for example
                <ident>att.linking.foo</ident> is the <ident>foo</ident> subclass of the attribute
              class <ident>att.linking</ident></item>
            <label>xml:id values</label>
            <item>The conventions for these vary somewhat. Most of the older chapters of the
              guidelines have consistently constructed identifiers, derived from the individual
              section headings. Identifiers must be provided for:<list>
                <item>every <gi>div</gi>, whether or not it is explicitly linked to elsewhere</item>
                <item>every bibliographic reference in the <ident>BIB-Bibliography.xml</ident> file</item>
              </list></item>
          </list>
        </div>
<div xml:id="fileOrg"><head>File release structure</head>
<p>
Currently, the organisation of the <code>/usr/share/xml/tei</code> and
<code>/usr/share/doc/tei-*</code> directories on the TEI web site is
as follows:
<eg>
tei
|-- Test
|-- custom
|   |-- odd
|   |-- schema
|   |   |-- dtd
|   |   |-- relaxng
|   |   `-- xsd
|   `-- templates
|-- odd
|   |-- Exemplars
|   |-- ReleaseNotes
|   |-- Source
|   |   |-- Guidelines
|   |   |   |-- en
|   |   |   |   `-- Images
|   |   |   `-- fr
|   |   |       `-- Images
|   |   |-- Images
|   |   `-- Specs
|   |       |-- 18decembre
|   |       `-- exemples
|   |-- Utilities
|   `-- webnav
|       `-- icons
|-- schema
|   |-- dtd
|   `-- relaxng
|-- stylesheet
|   |-- common
|   |-- common2
|   |-- docx
|   |   |-- from
|   |   |   |-- dynamic
|   |   |   |   `-- tests
|   |   |   |       `-- xspec
|   |   |   |-- graphics
|   |   |   |-- lists
|   |   |   |-- marginals
|   |   |   |-- maths
|   |   |   |-- paragraphs
|   |   |   |-- pass0
|   |   |   |-- pass2
|   |   |   |-- tables
|   |   |   |-- templates
|   |   |   |-- textruns
|   |   |   |-- utils
|   |   |   `-- wordsections
|   |   |-- misc
|   |   |-- to
|   |   |   |-- docxfiles
|   |   |   |-- drama
|   |   |   |-- dynamic
|   |   |   |-- graphics
|   |   |   |-- lists
|   |   |   |-- maths
|   |   |   |-- templates
|   |   |   `-- wordsections
|   |   `-- utils
|   |       |-- graphics
|   |       |-- identity
|   |       |-- maths
|   |       `-- verbatim
|   |-- epub
|   |-- fo
|   |-- fo2
|   |-- html
|   |-- latex
|   |-- latex2
|   |-- nlm
|   |-- odds
|   |-- odds2
|   |-- oo
|   |-- profiles
|   |   |-- bodley
|   |   |   `-- epub
|   |   |-- default
|   |   |   |-- csv
|   |   |   |-- docbook
|   |   |   |-- docx
|   |   |   |-- dtd
|   |   |   |-- epub
|   |   |   |-- fo
|   |   |   |-- html
|   |   |   |-- latex
|   |   |   |-- lite
|   |   |   |-- oddhtml
|   |   |   |-- oo
|   |   |   |-- p4
|   |   |   `-- relaxng
|   |   |-- enrich
|   |   |   |-- docx
|   |   |   |-- fo
|   |   |   |-- html
|   |   |   `-- latex
|   |   |-- iso
|   |   |   |-- docx
|   |   |   |   `-- model
|   |   |   |-- epub
|   |   |   |-- fo
|   |   |   |-- html
|   |   |   |-- latex
|   |   |   |-- schema
|   |   |   `-- tbx
|   |   |-- ota
|   |   |   |-- epub
|   |   |   `-- html
|   |   |-- oucs
|   |   |   |-- docx
|   |   |   |-- epub
|   |   |   `-- p4
|   |   |-- oucscourses
|   |   |   `-- docx
|   |   |-- podcasts
|   |   |   |-- docx
|   |   |   `-- epub
|   |   `-- tei
|   |       `-- epub
|   |-- slides
|   |-- slides2
|   |-- tite
|   |-- tools2
|   |-- xhtml
|   `-- xhtml2
`-- xquery

</eg>
</p></div>

      </div>
    </body>
<back>
<div type="appendix">
<head>Some other (mostly superceded) documents on the topic</head>

<listBibl>
 <bibl ><idno>TEI ED W9</idno>
<title>Points of Style For Drafts of TEI Guidelines</title>
<date>2 Mar 1990</date>
<ref target="http://www.tei-c.org/Vault/ED/edw09.gml">in Waterloo Script format</ref>
</bibl>

<bibl >
<title>Notes on House Style</title>
<idno>TEI ED W11</idno>
<date>14 Sep 1992</date>
<ref target="http://www.tei-c.org/Vault/ED/edw11.gml">in Waterloo script</ref>
<ref target="http://www.tei-c.org/Vault/ED/edw11.txt">formatted text</ref>
</bibl>


 <bibl ><idno>TEI ED W55</idno>
<title>Form for Draft Chapters of the TEI Guidelines</title>
<date >5 june 1996</date>
<ref target="http://www.tei-c.org/Vault/ED/edw55.tei">in TEI P2 format</ref>
<ref target="http://www.tei-c.org/Vault/ED/edw55.htm">in HTML format</ref>
<ref target="http://www.tei-c.org/Vault/ED/edw55.odd">in ODD format</ref>
</bibl>

 <bibl ><idno>TEI ED W57</idno>
<title>Procedures for Correcting Errors in the TEI Guidelines</title>
<date >July 23, 1994</date>
<ref target="http://www.tei-c.org/Vault/ED/edw57.tei">in TEI P2 format</ref>
<ref target="http://www.tei-c.org/Vault/ED/edw57.htm">in HTML format</ref>
</bibl>

</listBibl>
</div>
</back>  </text>
</TEI>

